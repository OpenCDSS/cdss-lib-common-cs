using System;
using System.Collections.Generic;

// TSUtil_NewEnsemble - create a TSEnsemble from 0+ time series.

/* NoticeStart

CDSS Common Java Library
CDSS Common Java Library is a part of Colorado's Decision Support Systems (CDSS)
Copyright (C) 1994-2019 Colorado Department of Natural Resources

CDSS Common Java Library is free software:  you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CDSS Common Java Library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CDSS Common Java Library.  If not, see <https://www.gnu.org/licenses/>.

NoticeEnd */

namespace RTi.TS
{

	using DateTime = RTi.Util.Time.DateTime;

	/// <summary>
	/// Create a TSEnsemble from 0+ time series.
	/// </summary>
	public class TSUtil_NewEnsemble
	{

	/// <summary>
	/// List of problems generated by this command, guaranteed to be non-null.
	/// </summary>
	private IList<string> __problems = new List<string>();

	/// <summary>
	/// Ensemble identifier.
	/// </summary>
	private string __ensembleID = null;

	/// <summary>
	/// Ensemble name.
	/// </summary>
	private string __ensembleName = null;

	/// <summary>
	/// Data table being filled with time series.
	/// </summary>
	private TSEnsemble __ensemble = null;

	/// <summary>
	/// Time series to process.
	/// </summary>
	private IList<TS> __tsList = null;

	/// <summary>
	/// Start of data period (null to use full time series).
	/// </summary>
	private DateTime __setStart = null;

	/// <summary>
	/// End of data period (null to use full time series).
	/// </summary>
	private DateTime __setEnd = null;

	/// <summary>
	/// Indicate whether time series are copied into the ensemble (true) or original references used (false, default).
	/// </summary>
	private bool __copyTimeSeries = false;

	/// <summary>
	/// Constructor. </summary>
	/// <param name="ensembleID"> identifier for the new ensemble. </param>
	/// <param name="ensembleName"> name for the new ensemble. </param>
	/// <param name="tslist"> list of time series being placed in the ensemble. </param>
	/// <param name="setStart"> first date/time to be transferred. </param>
	/// <param name="setEnd"> last date/time to be transferred. </param>
	/// <param name="copyTimeSeries"> if false, just include references to the original time series in the ensemble; if true,
	/// copy the time series and then include in the ensemble </param>
	public TSUtil_NewEnsemble(string ensembleID, string ensembleName, IList<TS> tslist, DateTime outputStart, DateTime outputEnd, bool copyTimeSeries)
	{ //String message;
		//String routine = getClass().getName() + ".constructor";
		// Save data members.
		__ensembleID = ensembleID;
		__ensembleName = ensembleName;
		__tsList = tslist;
		__setStart = outputStart;
		__setEnd = outputEnd;
		__copyTimeSeries = copyTimeSeries;
		// Make sure that the time series are regular and of the same interval
		if ((tslist != null) && !TSUtil.intervalsMatch(tslist))
		{
			throw new UnequalTimeIntervalException("Time series don't have the same interval - cannot create an ensemble.");
		}
		if ((tslist != null) && TSUtil.areAnyTimeSeriesIrregular(tslist))
		{
			throw new IrregularTimeSeriesNotSupportedException("One or more time series are irregular - cannot create an ensemble.");
		}
		if ((tslist != null) && !TSUtil.areUnitsCompatible(tslist, true))
		{
			throw new UnequalTimeIntervalException("Time series don't have the units - cannot create an ensemble.");
		}
	}

	/// <summary>
	/// Copy the time series into the table. </summary>
	/// <returns> the new ensemble. </returns>
	public virtual TSEnsemble newEnsemble()
	{
		// Create a new list of problems
		__problems = new List<string>();

		IList<TS> tslist = getTimeSeriesList();
		int tslistSize = 0;
		if (tslist != null)
		{
			tslistSize = tslist.Count;
		}

		// Create the ensemble, with no time series in the list...
		TSEnsemble ensemble = null;
		if (!getCopyTimeSeries() || (tslistSize == 0))
		{
			// Just create the ensemble by assembling time series from the list...
			ensemble = new TSEnsemble(getEnsembleID(), getEnsembleName(), getTimeSeriesList());
		}
		else
		{
			// Need to copy the time series (and optionally if the dates have been specified, change the period
			// during the copy.
			IList<TS> tslist2 = new List<TS>();
			DateTime start = getSetStart();
			DateTime end = getSetEnd();
			TS ts;
			bool doAdd;
			for (int i = 0; i < tslistSize; i++)
			{
				// Clone the time series because need a copy
				ts = (TS)tslist[i].clone();
				doAdd = true;
				if ((start != null) && (end != null))
				{
					// Change the period that that which is requested
					try
					{
						ts.changePeriodOfRecord(start,end);
					}
					catch (Exception)
					{
						__problems.Add("Unable to change period for \"" + ts.getIdentifier() + "\" - not adding to ensemble.");
						doAdd = false;
					}
				}
				if (doAdd)
				{
					tslist2.Add(ts);
				}
			}
			// Finally create the ensemble...
			ensemble = new TSEnsemble(getEnsembleID(), getEnsembleName(), tslist2);
		}
		setEnsemble(ensemble);
		return ensemble;
	}

	/// <summary>
	/// Return the indicator of whether to copy the time series (from the constructor).
	/// </summary>
	private bool getCopyTimeSeries()
	{
		return __copyTimeSeries;
	}

	/// <summary>
	/// Return the time series ensemble that results from processing in this class. </summary>
	/// <returns> the time series ensemble. </returns>
	public virtual TSEnsemble getEnsemble()
	{
		return __ensemble;
	}

	/// <summary>
	/// Return the ensemble identifier from constructor input.
	/// </summary>
	private string getEnsembleID()
	{
		return __ensembleID;
	}

	/// <summary>
	/// Return the ensemble name from constructor input.
	/// </summary>
	private string getEnsembleName()
	{
		return __ensembleName;
	}

	/// <summary>
	/// Return a list of problems for the time series.
	/// </summary>
	public virtual IList<string> getProblems()
	{
		return __problems;
	}

	/// <summary>
	/// Return the set end date/time. </summary>
	/// <returns> the set end date/time. </returns>
	public virtual DateTime getSetEnd()
	{
		return __setEnd;
	}

	/// <summary>
	/// Return the set start date/time. </summary>
	/// <returns> the set start date/time. </returns>
	public virtual DateTime getSetStart()
	{
		return __setStart;
	}

	/// <summary>
	/// Return the time series that are input to the processing (use ensemble for final list that is included). </summary>
	/// <returns> the time series that are input to the processing. </returns>
	public virtual IList<TS> getTimeSeriesList()
	{
		return __tsList;
	}

	/// <summary>
	/// Set the ensemble that is the result of processing in this class. </summary>
	/// <param name="ensemble"> Ensemble to set. </param>
	private void setEnsemble(TSEnsemble ensemble)
	{
		__ensemble = ensemble;
	}

	}

}